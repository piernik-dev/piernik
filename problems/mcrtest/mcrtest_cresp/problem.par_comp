$BASE_DOMAIN
    n_d = 64, 64, 1
    nb  = 4
    bnd_xl = 'out'
    bnd_xr = 'out'
    bnd_yl = 'out'
    bnd_yr = 'out'
    bnd_zl = 'out'
    bnd_zr = 'out'
    xmin   =-500.0
    xmax   = 500.0
    ymin   =-500.0
    ymax   = 500.0
    zmin   =-500.0
    zmax   = 500.0
 /

 $MPI_BLOCKS
    psize = 2, 2, 1
 /

 $UNITS
    units_set = "PSM"
 /

 $RESTART_CONTROL
    restart  = 'last'
    new_id   = ''
    nrestart = 0
 /

 $END_CONTROL
    tend   = 50.01 !.0 ! .1
    nend   = 100000
 /

 $OUTPUT_CONTROL
    problem_name = 'mcr'
    run_id = 'co1'
    dt_hdf  = 1.0
    dt_res  = 0.0
    dt_log  = 1.0e-10
    dt_tsl  = 0.000
    vars(1:) = 'ener', 'dens', 'magx', 'magy', 'magz', 'encr', 'velx', 'vely', 'velz', 'cree', 'cren'
 /

 $NUMERICAL_SETUP
    cfl    = 0.5
    smalld = 1.e-3
    smallei= 1.e-5
    integration_order = 2
    limiter= 'vanleer'
 /
*
 $FLUID_IONIZED
    gamma  = 1.66666666666666666
 /

 $COSMIC_RAYS
    cfl_cr        = 0.9
    cr_active     = 0.0
    ncrb          = 30    ! number of spectrum bins (including cutoff bins)
    K_cr_paral(1) = 0.0e3 ! 1.e3
    K_cr_paral(2) = 1.0e3 !10000.0 ! anisotropic
    K_cr_perp(1)  = 0.0e1 ! 1.e1
    K_cr_perp(2)  = 0     ! isotropic
 /

 $COSMIC_RAY_SPECTRUM
    cre_eff     = 0.01
    cfl_cre     = 0.3
    p_min_fix = 0.4e0   ! momentum fixed grid
    p_max_fix = 1.65e4  ! momentum fixed grid
    p_lo_init = 1.5e1   ! initial lower cut momentum
    p_up_init = 7.5e2   ! initial upper cut momentum
    expan_order = 1
    f_init    = 1.0 !   ! < initial value of the normalization parameter in cre energy spectrum
    q_init    = 3.6 !   ! < initial value of power law coefficient in cre enrgy spectrum
    q_big     = 30.e0   ! < limit value of power law coefficient in cre energy spectrum, do not set that value too high!
    K_cre_pow     = 0.5 ! 0.5
    e_small     = 1.0e-5 ! 8.5e-3 ! 2.0e-4! 12.0e0
    initial_spectrum = 'powl' ! 'powl', 'brpl', 'bump', 'symf', 'syme'  !   powl - power-law, brpl - broken power-law, bump - bump-type spectrum, symf - symmetric distr. function spectrum, syme - symmetric energy distr. spectrum
    bump_amp    = 0.5d0  ! amplitude of bump-type spectrum
    e_small_approx_init_cond = 1  ! 0  ! 1 ! tells algoritm to approximate both boundary momenta at initialization
    e_small_approx_p_lo = 1 ! 0 ! 1  ! tells algorithm to appriximate lower boundary momentum
    e_small_approx_p_up = 1 ! 0 ! 1  ! tells algorithm to approximate upper boundary momentum
    add_spectrum_base   = 0 ! 0 ! 1  ! ensures that minimal energy level after initialization is at least esmall
    max_p_ratio = 2.5
    cre_active  = 0.0
    NR_iter_limit = 100
    force_init_NR = .false.
    adiab_active  = .true.
    synch_active  = .false.
 /

 $CR_SPECIES
    eE  = .true., .false., .true.
    eH1 = .true., .true., .false.
 /

 $MULTIGRID_SOLVER
!    stdout = .true.
    dirty_debug = .true.
 /

 $MULTIGRID_DIFFUSION
    diff_explicit = .true.
    diff_theta     = 0.6
    diff_tstep_fac = 1000
    norm_tol = 1e-2
    nsmoob = 4
    max_cycles = 50
 /

 $PROBLEM_CONTROL
    d0        = 1.0 ! when COSM_RAYS_SOURCES are defined, the density somehow scales the result of sourcecosmicrays.F90 and values like 1e5 quickly lead to FP overflow. This must be a bug.
    p0        = 1.0
    bx0       = 1.0e-10
    by0       = 1.0e-10
    bz0       = 0.0
    x0        = 0.0
    y0        = 0.0
    z0        = 0.0
    r0        = 128.0
    vxd0      = 0.0
    vyd0      = 0.0
    vzd0      = 0.0
    expansion_cnst = -5.0e-2
    beta_cr   = 0.0e-3
    amp_cr1   = 1000.0
 /

 $PIERNIK_DEBUG
    constant_dt = 0.01

 /

 $INTERACTIONS
 /

 $AMR
 /

 $CRE_TEST
     u_b0     = 0.0 ! initial magnetic energy-density
     u_d0     = 0.0 ! initial magnitude of div_v
     div_v    = 0.0 ! velocity field divergence, periodic, sums up with u_d0
     ub_ampl  = 0.0 ! amplitude of synchrotron cooling coefficient with time
     omega_d  = 0.0 ! omega_d parameter for test with periodic adiabatic compression: u_d0 = u_d0 + div_v * cos(omega_d * t)
     omega_b  = 0.0 ! omega_b parameter for periodic variation of u_b: u_b = u_b0 + ub_ampl * cos(omega_b * t)
     dt_ini   = 0.01     ! initial timestep, optional, if absent, initial dt shall be computed. Use value less than dt_max (cresp_driver)
     force_dt = .false.  ! < if .true. - dt_ini shall be constant throughout entire simulation

 /
